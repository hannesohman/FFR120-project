from main import run_simulation
import numpy as np
import matplotlib.pyplot as plt
import json
import time
import os
import heapq


def save_mean_results(result, parameters, foldername, filename, vaccination_time):
    """
    Saves parameters and results to filename, filename_parameters in a given folder
    Results has to be a ndarray of shape (4, N_indivd)
    """
    # create directory
    newpath = f"./results/{foldername}"
    if not os.path.exists(newpath):
        os.makedirs(newpath)

    
    # save results
    np.savetxt(f"./results/{foldername}/{filename}_result.txt", result)

    # save a plot of results (not for final poster, only temporary use)
    S = result[0]
    I = result[1]
    R = result[2]
    D = result[3]
    tot = parameters["N_indiv"]
    days = np.linspace(0, parameters["simulation_days"], num=S.size)
    plt.plot(days, S/tot, c=[0.2, 0.4, 0.7], label="S")
    plt.plot(days, I/tot, c=[0.7, 0.3, 0.2], label="I")
    plt.plot(days, R/tot, c=[0.3, 0.7, 0.3], label="R")
    # deaths are not really showing anything for now
    # plt.plot(days, D, c=[0.6, 0.6, 0.6], label="D")
    plt.xlim(0, parameters["simulation_days"])
    plt.ylim(0, 1)
    plt.gca().set_aspect('auto')

    plt.legend()
    plt.xlabel("Time (days)")
    plt.ylabel("Individuals")
    
    if vaccination_time != None:
        plt.axvline(x = vaccination_time, color = 'g', linestyle = '--', label = 'Time of Vaccination')
        parameters["vaccination_x"] = vaccination_time

    heap = I.tolist()
    heapq.heapify(heap)
    lockdown_time = None

    for i, val in enumerate(heap):
        if val > parameters["lockdown_time"]*parameters["N_indiv"]:
            lockdown_time = i*parameters["dt"]
            break
    else:
        lockdown_time = None


    if lockdown_time != None:
        plt.axvline(x = lockdown_time, color = 'b', linestyle = "--", label = 'Time of Lockdown')
        parameters["lockdown_x"] = lockdown_time

    # save parameters
    with open(f"./results/{foldername}/{filename}_param.json", "w+") as file:
        json.dump(parameters, file)

    

    title = f'Lockdown at {parameters["lockdown_time"]}, vaccination at {parameters["vaccine_alert"]}'
    plt.title(title)

    plt.savefig(f"./results/{foldername}/{filename}_plot.png")
    print(f"Saved ./results/{foldername}/{filename}_plot.png")
    plt.clf()
    plt.close()

dt = 0.1

parameters = {
    "beta": 1 / 1.5*dt,
    "gamma": 1 / 14*dt,
    "theta": 0.0001*dt,
    "alpha": 1 / 25*dt,
    "N_indiv": 2000,
    "simulation_days": 900,
    "dt": 0.1,
    "I0": 10,  # too low -> risk of disease dying out
    "sus_mean": 1,
    "sus_std": 0.2,
    "vaccine_mode": "risk group",
    "vaccine_factor": 0.2,
    "vaccine_alert": 20,  # fraction of infected population before vaccination
    "fraction_to_vaccinate": 0.5,
    "lockdown_time": 1,
    "vaccination_x": 0,
    "lockdown_x": 0,
    "display_graphics": False,
}

foldername = time.strftime("%Y-%m-%d-%H.%M.%S")
repeats = 10



vaccination_times = [5, 10, 20, 40, 60]
lockdown_times = [0.1, 0.2, 0.3, 1]

for vaccination_time in vaccination_times:
    parameters["vaccine_alert"] = vaccination_time
    parameters["lockdown_time"] = 1
    results_list = []
    for i in range(repeats):
        result, vaccination_time = run_simulation(parameters)
        results_list.append(result)
    results_list = np.array(results_list)
    result = np.mean(results_list, axis=0)

    filename = f"Vaccination_{vaccination_time}_mean"
    save_mean_results(result, parameters, foldername, filename, vaccination_time)

for lockdown_time in lockdown_times:
    parameters["lockdown_time"] = lockdown_time
    parameters["vaccine_alert"] = 10000
    results_list = []
    for i in range(repeats):
        result, vaccination_time = run_simulation(parameters)
        results_list.append(result)
    results_list = np.array(results_list)
    result = np.mean(results_list, axis=0)

    filename = f"Lockdown_{lockdown_time}_mean"
    save_mean_results(result, parameters, foldername, filename, vaccination_time)
